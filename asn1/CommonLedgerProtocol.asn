CommonLedgerProtocol
DEFINITIONS
AUTOMATIC TAGS ::=
BEGIN

IMPORTS
    UInt8,
    UInt32,
    UInt64,
    UInt128,
    UInt256
    FROM GenericTypes

    Address,
    Timestamp
    FROM InterledgerTypes
;

SideProtocolData ::= SEQUENCE OF SEQUENCE {
  protocolName IA5String,
  protocolData OCTET STRING
}

Request ::= SEQUENCE {
  packet CHOICE {
    null NULL,
    packet InterledgerPacket,
  }
  -- Additional data for protocol extensibility
  sideProtocolData SideProtocolData
}

Response ::= SEQUENCE {
  packet CHOICE {
    null NULL,
    packet InterledgerPacket,
  }
  -- Additional data for protocol extensibility
  sideProtocolData SideProtocolData
}

Prepare ::= SEQUENCE {
  transferId UInt128,
  amount UInt64,
  condition UInt256,
  expiresAt Timestamp,
  packet InterledgerPacket,
  -- Additional data for protocol extensibility
  sideProtocolData SideProtocolData
}

Fulfill ::= SEQUENCE {
  transferId UInt128,
  fulfillment UInt256,
  -- Additional data for protocol extensibility
  sideProtocolData SideProtocolData
}

Reject ::= SEQUENCE {
  transferId UInt128,
  rejectionReason InterledgerPacket,
  -- Additional data for protocol extensibility
  sideProtocolData SideProtocolData
}

CALL ::= CLASS {
    &typeId UInt8 UNIQUE,
    &Type
} WITH SYNTAX {&typeId &Type}

CallSet CALL ::= {
    {1 Request} |
    {2 Response} |
    {3 Prepare} |
    {4 Fulfill} |
    {5 Reject}
}

CommonLedgerProtocolPacket ::= SEQUENCE {
    -- One byte type ID
    type CALL.&typeId ({CallSet}),
    -- Used to associate responses with calls they respond to
    -- If requestId = 0, the server MUST not send a response
    requestId UInt32,
    -- Length-prefixed main data
    data CALL.&Type ({CallSet}{@type})
}

END
